

import google.generativeai as genai
import os
from dotenv import load_dotenv
from datetime import datetime
from google.generativeai.types import HarmCategory, HarmBlockThreshold

# Load environment variables from .env file if present
load_dotenv()

def summarize_text(text, output_file_path, api_key=None):
    """
    Summarizes the given text using the Gemini model and saves the summary to a file.

    Args:
        text (str): The text to summarize.
        output_file_path (str): The path to save the summary.
        api_key (str, optional): Your Gemini API key. Defaults to None and reads from the environment.

    Returns:
        None
    """

    if not api_key:
      api_key = os.environ.get("GOOGLE_API_KEY")
    
    if not api_key:
      raise ValueError("API key not found. Ensure you have set the GOOGLE_API_KEY environment variable or passed it directly.")


    try:
      genai.configure(api_key=api_key)
      model = genai.GenerativeModel(model_name='gemini-2.0-flash-exp')

      prompt = f"""
      Please provide a summary of the following youtube video, ensuring that the key points are captured.
      The summary should be no more than 50% of the original text.
      The video text is:
      {text}
      """
      
      response = model.generate_content(prompt, safety_settings={
          HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
          HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
          HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
          HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
        })
      if hasattr(response, "text") and response.text:
         summary = response.text

         with open(output_file_path, "w", encoding="utf-8") as outfile:
            outfile.write(summary)
            print(f"Summary saved to: {output_file_path}")
      else:
            print("No summary was generated by the model.")

    except Exception as e:
      print(f"An error occurred: {e}")


if __name__ == "__main__":
    input_file_path = input("Enter the path of the text file to summarize: ")
    output_file_path = input("Enter the path of the file to store the summary: ")

    try:
      with open(input_file_path, 'r', encoding='utf-8') as infile:
        text_to_summarize = infile.read()
        #generate filename with a timestamp
        now = datetime.now()
        formatted_time = now.strftime("%Y-%m-%d_%H-%M-%S")
        
        summarize_text(text_to_summarize, f"{output_file_path}_{formatted_time}.txt")
    except FileNotFoundError:
      print("Error: Input file not found.")
    except Exception as e:
      print(f"An error occurred: {e}")